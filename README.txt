N26071487 陳彥勳


一、檔案及其使用說明：

	在"Graph-Theory-Project-Template-master"資料夾
	
	輸入圖形資料在"topo.txt"裡
	
	輸入 make && ./main.out  && dot -Tpng graph_in.dot -o graph_in.png && dot -Tpng graph_out.dot -o graph_out.png
	
	即可自動讀取"topo.txt"進main.cc的NetworkManager中
	
	且要輸入起始點 "initial_point: "即可執行檔案
	
	會生成5個檔案
	
	graph_in.dot 以及 graph_in.png 可以看到輸入圖形拓譜
	
	graph_out.dot 以及 graph_out.png 可以看到輸入圖形拓譜
	
	main.txt 可以看到其路徑順序
	
	
二、演算法說明：("main.cc"也有註解演算法)
	
	首先會得到圖形網路的"點"以及"邊"的資訊
	
	因為NetworkManager為有向圖, 如果輸入圖形為無向, 則必需給予兩條正反向路徑
	
	判斷奇偶點，如果為奇點則連接其點間最短路徑
	
	假設有4奇點(6奇點...), 則連接兩對(3對...)加起來的最短路徑
	
	連接後的網路map其點與邊存進adv
	
	即可執行助教example的dfs
	
	中間有修改一些東西
	
	助教的dfs是對點做遍歷，我將其改變為對邊
	
	另外因為是無向圖, 所以有正反兩條路徑
	
	這裡分為兩種情況, 奇點或偶點
	
	如果是奇點連結尾的路徑有兩條的話
	
	會正反向各走一次, 反之只會有正反其中一條
	
	dfs_paths會存經過的路徑
	
	dfs_paths_no會存未來不能經過的路徑
	
	dfs_paths_no會存"奇點dfs_paths正向的路徑"或"偶點dfs_paths反向的路徑"
	
	意思是假設正反要各走一次，則dfs_paths_no存dfs_paths的同方向, 反之存dfs_paths的反方向
	
	因為偶點走了正向就不會走回去了, 而奇點會正反向都走
	
	假設路徑沒走完或走不下去，則會pop走錯的路徑
	
	直到有一條路徑可以將全部路線走完
	
	當路線能走完, 最後一個點必會是起始點
	
	然後最後輸出路徑, 完成這次作業
	
三、問題與檢討：
	
	這一次做的是郵差問題, 而不是七橋問題
	
	所以我的程式無法解決a點到b點有多重(2條以上)路線的問題
	
	a點到b點只能有一條無向的路徑
	
	另外此程式無法解決2奇點以上的問題
	
	但能解決"全是偶點"或是"兩奇點相鄰"的任意圖形
	
	我有想到多奇點的解決方法
	
	假設有4奇點, 我會找出4點互相連結之最短路徑
	
	選出不同兩組路徑最短的
	
	將其經過路線皆多接一條線(總共無向2條=有向4條)
	
	有了多接的線, 將之用dfs遍歷即可
	
	因為全偶點的圖最短路徑就是全部邊的數量
	
	有奇點的圖會是所有邊加上奇點互連最短路徑的邊相加
	
	因此有了所有的邊, 對其遍歷即可得到最終路徑